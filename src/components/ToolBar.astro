---
//import { createHotContext as __vite__createHotContext } from "/@vite/client";
//import.meta.hot = __vite__createHotContext("/node_modules/astro/dist/runtime/client/dev-toolbar/toolbar.js?v=736de75c");
import { getIconElement, isDefinedIcon } from "/node_modules/astro/dist/runtime/client/dev-toolbar/ui-library/icons.js?v=736de75c";
import ThemeSelector from "../components/ThemeSelector.astro";

---

<jordans-toolbar>
    <ThemeSelector />
</jordans-toolbar>

<script>
import type { Code } from "astro:components";
import ThemeSelector from "./ThemeSelector.astro";

    const WS_EVENT_NAME = "jordans-toolbar";
    const HOVER_DELAY = 2 * 1e3;
    const TOOLBAR_HITBOX_BELOW = 42;

    class JordansToolbar extends HTMLElement {
        //shadowRoot;
        delayedHideTimeout;
        toolbarContainer;
        apps : string[][] = [];
        hasBeenInitialized = false;
        appsToShow = 1;

        // TODO: This should be dynamic based on the screen size or at least configurable
        constructor() {
            super();
            //this.shadowRoot = this.attachShadow({ mode: "open" });
        }

        connectedCallback() {
            console.log("Custom element added to page.");
            this.prep_Apps();
            this.tb_init();
        }

        disconnectedCallback() {
            console.log("Custom element removed from page.");
        }

        prep_Apps() {
            this.apps = [
                ["home",""],
                ["theme-selector","theme-selector-canvas"]
            ];
        }

        tb_init() {
            this.innerHTML = `
                <style>
                    :host {
                        all: initial;
                        z-index: 999999;
                        view-transition-name: jordans-toolbar;
                    }

                    ::view-transition-old(jordans-toolbar),
                    ::view-transition-new(jordans-toolbar) {
                        animation: none;
                    }

                    #toolbar-root {
                        position: fixed;
                        width: 80%;
                        top: -5px;
                        left: 10%;
                        z-index: 2000000010;
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        transition: top 0.39s cubic-bezier(0.485, -0.050, 0.285, 1.505);
                        pointer-events: none;
                    }

                    #toolbar-root[data-hidden] {
                        top: -50px;
                    }

                    #toolbar-root[data-hidden] #tool-bar .item {
                        opacity: 0.2;
                    }

                    #tool-bar-hitbox-above,
                    #tool-bar-hitbox-below {
                        width: 100%;
                        pointer-events: auto;
                    }
                    #tool-bar-hitbox-above {
                        height: 16px;
                    }
                    #tool-bar-hitbox-below {
                        height: ${TOOLBAR_HITBOX_BELOW}px;
                    }
                    #tool-bar {
                        height: 40px;
                        width: 100%;
                        overflow: hidden;
                        pointer-events: auto;
                        
                        border: 1px solid #343841;
                        border-radius: 9999px;
                        box-shadow: 0px 0px 0px 0px rgba(19, 21, 26, 0.30), 0px 1px 2px 0px rgba(19, 21, 26, 0.29), 0px 4px 4px 0px rgba(19, 21, 26, 0.26), 0px 10px 6px 0px rgba(19, 21, 26, 0.15), 0px 17px 7px 0px rgba(19, 21, 26, 0.04), 0px 26px 7px 0px rgba(19, 21, 26, 0.01);
                    }

                    @media (forced-colors: active) {
                        #tool-bar {
                            background: white;
                        }
                    }

                    #tool-bar .item {
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        width: 44px;
                        border: 0;
                        background: transparent;
                        color: white;
                        font-family: system-ui, sans-serif;
                        font-size: 1rem;
                        line-height: 1.2;
                        white-space: nowrap;
                        text-decoration: none;
                        padding: 0;
                        margin: 0;
                        overflow: hidden;
                        transition: opacity 0.2s ease-out 0s;
                    }

                    #tool-bar #tool-bar-container .item:hover, #tool-bar #tool-bar-container .item:focus-visible {
                        background: #FFFFFF20;
                        cursor: pointer;
                        outline-offset: -3px;
                    }

                    #tool-bar #tool-bar-container .item[data-app-error]:hover, #tool-bar #tool-bar-container .item[data-app-error]:focus-visible {
                        cursor: not-allowed;
                        background: #ff252520;
                    }

                    #tool-bar .item:first-of-type {
                        border-top-left-radius: 9999px;
                        border-bottom-left-radius: 9999px;
                        width: 42px;
                        padding-left: 4px;
                    }

                    #tool-bar .item:last-of-type {
                        border-top-right-radius: 9999px;
                        border-bottom-right-radius: 9999px;
                        width: 42px;
                        padding-right: 4px;
                    }
                    #tool-bar #tool-bar-container .item.active {
                        background: rgba(71, 78, 94, 1);
                    }

                    #tool-bar .item-tooltip {
                        background: linear-gradient(0deg, #13151A, #13151A), linear-gradient(0deg, #343841, #343841);
                        border: 1px solid rgba(52, 56, 65, 1);
                        border-radius: 4px;
                        padding: 4px 8px;
                        position: absolute;
                        bottom: ${30}px;
                        font-size: 14px;
                        opacity: 0;
                        transition: opacity 0.2s ease-in-out 0s;
                        pointer-events: none;
                        user-select: none;
                    }

                    #tool-bar .item-tooltip::after{
                        content: '';
                        position: absolute;
                        left: calc(50% - 5px);
                        bottom: -6px;
                        border-left: 5px solid transparent;
                        border-right: 5px solid transparent;
                        border-top: 5px solid #343841;
                    }

                    #tool-bar .item[data-app-error] .icon {
                        opacity: 0.35;
                    }

                    #tool-bar .item:hover .item-tooltip, #tool-bar .item:not(.active):focus-visible .item-tooltip {
                        transition: opacity 0.1s ease-in-out 200ms;
                        opacity: 1;
                    }

                    @media (forced-colors: active) {
                        #tool-bar .item:hover .item-tooltip,
                        #tool-bar .item:not(.active):focus-visible .item-tooltip {
                            background: white;
                        }
                    }

                    #tool-bar #tool-bar-container .item.active .notification rect, #tool-bar #tool-bar-container .item.active .notification path {
                        stroke: rgba(71, 78, 94, 1);
                    }

                    #tool-bar .item .icon {
                        position: relative;
                        max-width: 20px;
                        max-height: 20px;
                        user-select: none;
                    }

                    #tool-bar .item .icon>svg {
                        width: 20px;
                        height: 20px;
                        display: block;
                        margin: auto;
                    }

                    @media (forced-colors: active) {
                        #tool-bar .item svg path[fill="#fff"] {
                            fill: black;
                        }
                    }

                    #tool-bar .item .notification {
                        display: none;
                        position: absolute;
                        top: -4px;
                        right: -6px;
                        width: 10px;
                        height: 10px;
                    }

                    #tool-bar .item .notification svg {
                        display: block;
                    }

                    #toolbar-root:not([data-no-notification]) #tool-bar .item .notification[data-active] {
                        display: block;
                    }

                    #tool-bar #tool-bar-container {
                        height: 100%;
                        width: 100%;
                        display: flex;
                        justify-content: space-between;
                    }

                    #tool-bar .separator {
                        background: rgba(52, 56, 65, 1);
                        width: 1px;
                    }

                    @media screen and (max-width: 767px) {
                        #toolbar-root {
                            display: none;
                        }
                    }
                </style>
                <div id="toolbar-root" data-hidden>
                    <div id="tool-bar-hitbox-above"></div>

                    <div id="tool-bar" class="bg-neutral w-2">
                        <div id="tool-bar-container">
                            <button class="item" data-app-id="${this.apps.at(0)?.at(0)}">
                                <div class="icon">
                                    <svg fill="currentColor" class="w-6 h-6 text-gray-500 transition duration-75 group-hover:text-gray-900 dark:text-gray-400 dark:group-hover:text-white" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                                        <path stroke="#fff" d="M11.47 3.84a.75.75 0 011.06 0l8.69 8.69a.75.75 0 101.06-1.06l-8.689-8.69a2.25 2.25 0 00-3.182 0l-8.69 8.69a.75.75 0 001.061 1.06l8.69-8.69z"></path>
                                        <path fill="#fff" d="M12 5.432l8.159 8.159c.03.03.06.058.091.086v6.198c0 1.035-.84 1.875-1.875 1.875H15a.75.75 0 01-.75-.75v-4.5a.75.75 0 00-.75-.75h-3a.75.75 0 00-.75.75V21a.75.75 0 01-.75.75H5.625a1.875 1.875 0 01-1.875-1.875v-6.198a2.29 2.29 0 00.091-.086L12 5.43z"></path>
                                    </svg>
                                    <div class="notification"></div>
                                </div>
                                <span class="item-tooltip">Menu</span>
                            </button>
                            <div class="separator"></div>

                            <div></div>

                            <div class="separator"></div>
                            <button is="jordans-themes" id="jordans-themes-btn" class="item dropdown-end" data-app-id="${this.apps.at(1)?.at(0)}"></button>
                        </div>
                    </div>
                    
                    <div id="tool-bar-hitbox-below"></div>
                </div>`;
            
            this.toolbarContainer = this.querySelector("#toolbar-root"); //focus the toolbar root
            this.attachEvents(); //attach mouseenter & mouseleave events for animations
        }

        /*

        */
        getActiveApp() {
            //var res = this.apps.find((app) => app.active)
            const items = this.querySelectorAll(".item");
            var res = undefined;
            items.forEach((item) => {
                //console.log(item);
                if (item.getAttribute("active") != null) {
                    res = true;
                }
            });

            console.log("Toolbar app activity -> " + res);
            return res != undefined;
        }

        getAppById(id) {
            return this.apps.find((app) => app.id === id);
        }
        
        getAppCanvasById(id) {
            return this.querySelector(
                `jordans-themes-canvas[data-app-id="${id}"]`
            );
        }
        
        // Attach events to toolbar for animations
        attachEvents() {
            const items = this.querySelectorAll(".item");
            items.forEach((item) => {
                item.addEventListener("click", async (event) => {
                    const target = event.currentTarget;
                    //console.log(target);
                    if (!target || !(target instanceof HTMLElement))
                        return;

                    const id = target.dataset.appId;
                    console.log(id);
                    if (!id)
                        return;

                    //if (id == "theme-selector")
                        //console.log(id);

                    //const app = this.getAppById(id);
                    //console.log(app);
                    //if (!app)
                        //return;

                    event.stopPropagation();
                    this.toggleApp(item);
                    //await this.toggleAppStatus(app);
                });
            });

            // When the mouse enters the div box of #toolbar-root
            ["mouseenter", "focusin"].forEach((event) => {
                this.toolbarContainer.addEventListener(event, () => {
                    this.clearDelayedHide();
                    if (this.isHidden()) {
                        this.setToolbarVisible(true);
                    }
                });
            });
            
            // When the mouse leaves the div box of #toolbar-root
            ["mouseleave", "focusout"].forEach((event) => {

                this.toolbarContainer.addEventListener(event, () => {
                    this.clearDelayedHide(); //prep for hide
                    // if any of the apps are active or the toolbar is already hidden, ignore
                    if (this.getActiveApp()) {
                        //console.log("still active...");
                        return;
                    }
                    this.triggerDelayedHide(); //otherwise hide toolbar
                });
            });

            /*
            var toolbar = this.querySelector("#toolbar-root");
            document.addEventListener("mousedown", (event) => {
                if (toolbar.contains(event.target)) {
                    console.log("Clicked Inside");
                } else {
                    console.log("Clicked Outside / Elsewhere");
                }
            });*/
            
            // Add event listener to keyboard input 
            document.addEventListener("keyup", (event) => {
                if (event.key !== "Escape")
                    return;
                if (this.isHidden())
                    return;
                const activeApp = this.getActiveApp();
                if (activeApp) {
                    return; //if any app is active, do nothing
                } else { // -> if user presses escape key, it'll exit the toolbar
                    //this.toggleApp(false);
                    this.setToolbarVisible(false);
                }
            });
        }

        isHidden() {
            var res = this.toolbarContainer?.hasAttribute("data-hidden") ?? true
            console.log("checking hidden -> " + res);
            return res;
        }

        clearDelayedHide() {
            window.clearTimeout(this.delayedHideTimeout);
            this.delayedHideTimeout = void 0;
        }

        triggerDelayedHide() {
            this.clearDelayedHide();
            this.delayedHideTimeout = window.setTimeout(() => {
                this.setToolbarVisible(false);
                this.delayedHideTimeout = void 0;
            }, HOVER_DELAY);
        }
        
        // A method for toggling the canvas of a specific toolbar item
        toggleApp(item){
            const status = item.getAttribute("active") == null; //find out if the item is not active
            var canvasName = undefined; // a variable to hold the id/ name of the canvas
            var canvas = null; // a variable to hold the canvas container

            // compare the current item's id with the roster of registered apps 
            this.apps.some(app => {
                if (app[0] == item.getAttribute("data-app-id")) {
                    canvasName = app[1]; //the second element of each app holds the id/ name of the respective canvas
                    return canvasName != undefined || canvasName != ""; //redundant
                }
            });

            if (canvasName == undefined || canvasName == "") {
                console.log("failed to map a registered item...");
                console.log(canvasName);
                return;
            } else {
                // The desired canvas object is already registered into the DOM, so we just need to call it...
                canvas = document.getElementById(canvasName);
            }


            if (status) {
                // the item previously wasn't active, so here we enable it...
                canvas.style.display = "block";
                item.setAttribute("active","");
            } else { // disable the item & canvas
                canvas.style.display = "none";
                item.removeAttribute("active");
                console.log("Active app closed...");
            }
        }
        
        setToolbarVisible(newStatus) {
            const barContainer = this.querySelector("#tool-bar-container");
            const toolBar = this.querySelector("#tool-bar");
            const toolBarHitboxBelow = this.querySelector("#tool-bar-hitbox-below");
            
            if (newStatus === true) {
                this.toolbarContainer?.removeAttribute("data-hidden");
                barContainer?.removeAttribute("inert");
                toolBar?.removeAttribute("tabindex");
                if (toolBarHitboxBelow)
                    toolBarHitboxBelow.style.height = "0";
                return;
            }
            
            if (newStatus === false) {
                this.toolbarContainer?.setAttribute("data-hidden", "");
                barContainer?.setAttribute("inert", "");
                toolBar?.setAttribute("tabindex", "0");
                if (toolBarHitboxBelow) {
                    toolBarHitboxBelow.style.height = `${TOOLBAR_HITBOX_BELOW}px`;
                }
                
                const items = this.querySelectorAll(".item");
                for (const item of items){ 
                    if (item.getAttribute("active")){
                        console.log("Found active app, attempting to toggle...");
                        this.toggleApp(item);
                        break;
                    }
                }  
                
                return;
            }
        }
    }
    
    customElements.define("jordans-toolbar", JordansToolbar);
</script>
