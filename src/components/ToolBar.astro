---
//import { createHotContext as __vite__createHotContext } from "/@vite/client";
//import.meta.hot = __vite__createHotContext("/node_modules/astro/dist/runtime/client/dev-toolbar/toolbar.js?v=736de75c");
import { getIconElement, isDefinedIcon } from "/node_modules/astro/dist/runtime/client/dev-toolbar/ui-library/icons.js?v=736de75c";
import ThemeSelector from "../components/ThemeSelector.astro";

---

<jordans-toolbar>
    <ThemeSelector />
</jordans-toolbar>

<script>
    const WS_EVENT_NAME = "jordans-toolbar";
    const HOVER_DELAY = 2 * 1e3;
    const TOOLBAR_HITBOX_BELOW = 42;
    //const themes = ThemeSelector;

    class JordansToolbar extends HTMLElement {
        shadowRoot;
        delayedHideTimeout;
        toolbarContainer;
        apps = [];
        hasBeenInitialized = false;

        // TODO: This should be dynamic based on the screen size or at least configurable
        //customAppsToShow = 3;
        constructor() {
            super();
            this.shadowRoot = this.attachShadow({ mode: "open" });
            this.tb_init();
        }

        connectedCallback() {
            console.log("Custom element added to page.");
        }

        disconnectedCallback() {
            console.log("Custom element removed from page.");
        }

        tb_init() {
            console.log("Init");

            this.shadowRoot.innerHTML = `
                <style>
                    :host {
                        all: initial;
                        z-index: 999999;
                        view-transition-name: jordans-toolbar;
                        display: contents;
                    }

                    ::view-transition-old(jordans-toolbar),
                    ::view-transition-new(jordans-toolbar) {
                        animation: none;
                    }

                    #toolbar-root {
                        position: fixed;
                        width: 80%;
                        top: 0px;
                        left: 10%;
                        z-index: 2000000010;
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        transition: top 0.35s cubic-bezier(0.485, -0.050, 0.285, 1.505);
                        pointer-events: none;
                    }

                    #toolbar-root[data-hidden] {
                        top: -40px;
                    }

                    #toolbar-root[data-hidden] #tool-bar .item {
                        opacity: 0.2;
                    }

                    #tool-bar-hitbox-above,
                    #tool-bar-hitbox-below {
                        width: 100%;
                        pointer-events: auto;
                    }
                    #tool-bar-hitbox-above {
                        height: 16px;
                    }
                    #tool-bar-hitbox-below {
                        height: ${TOOLBAR_HITBOX_BELOW}px;
                    }
                    #tool-bar {
                        height: 40px;
                        width: 100%;
                        overflow: hidden;
                        pointer-events: auto;
                        background: linear-gradient(180deg, #13151A 0%, rgba(19, 21, 26, 0.88) 100%);
                        border: 1px solid #343841;
                        border-radius: 9999px;
                        box-shadow: 0px 0px 0px 0px rgba(19, 21, 26, 0.30), 0px 1px 2px 0px rgba(19, 21, 26, 0.29), 0px 4px 4px 0px rgba(19, 21, 26, 0.26), 0px 10px 6px 0px rgba(19, 21, 26, 0.15), 0px 17px 7px 0px rgba(19, 21, 26, 0.04), 0px 26px 7px 0px rgba(19, 21, 26, 0.01);
                    }

                    @media (forced-colors: active) {
                        #tool-bar {
                            background: white;
                        }
                    }

                    #tool-bar .item {
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        width: 44px;
                        border: 0;
                        background: transparent;
                        color: white;
                        font-family: system-ui, sans-serif;
                        font-size: 1rem;
                        line-height: 1.2;
                        white-space: nowrap;
                        text-decoration: none;
                        padding: 0;
                        margin: 0;
                        overflow: hidden;
                        transition: opacity 0.2s ease-out 0s;
                    }

                    #tool-bar #tool-bar-container .item:hover, #tool-bar #tool-bar-container .item:focus-visible {
                        background: #FFFFFF20;
                        cursor: pointer;
                        outline-offset: -3px;
                    }

                    #tool-bar #tool-bar-container .item[data-app-error]:hover, #tool-bar #tool-bar-container .item[data-app-error]:focus-visible {
                        cursor: not-allowed;
                        background: #ff252520;
                    }

                    #tool-bar .item:first-of-type {
                        border-top-left-radius: 9999px;
                        border-bottom-left-radius: 9999px;
                        width: 42px;
                        padding-left: 4px;
                    }

                    #tool-bar .item:last-of-type {
                        border-top-right-radius: 9999px;
                        border-bottom-right-radius: 9999px;
                        width: 42px;
                        padding-right: 4px;
                    }
                    #tool-bar #tool-bar-container .item.active {
                        background: rgba(71, 78, 94, 1);
                    }

                    #tool-bar .item-tooltip {
                        background: linear-gradient(0deg, #13151A, #13151A), linear-gradient(0deg, #343841, #343841);
                        border: 1px solid rgba(52, 56, 65, 1);
                        border-radius: 4px;
                        padding: 4px 8px;
                        position: absolute;
                        bottom: ${30}px;
                        font-size: 14px;
                        opacity: 0;
                        transition: opacity 0.2s ease-in-out 0s;
                        pointer-events: none;
                        user-select: none;
                    }

                    #tool-bar .item-tooltip::after{
                        content: '';
                        position: absolute;
                        left: calc(50% - 5px);
                        bottom: -6px;
                        border-left: 5px solid transparent;
                        border-right: 5px solid transparent;
                        border-top: 5px solid #343841;
                    }

                    #tool-bar .item[data-app-error] .icon {
                        opacity: 0.35;
                    }

                    #tool-bar .item:hover .item-tooltip, #tool-bar .item:not(.active):focus-visible .item-tooltip {
                        transition: opacity 0.1s ease-in-out 200ms;
                        opacity: 1;
                    }

                    @media (forced-colors: active) {
                        #tool-bar .item:hover .item-tooltip,
                        #tool-bar .item:not(.active):focus-visible .item-tooltip {
                            background: white;
                        }
                    }

                    #tool-bar #tool-bar-container .item.active .notification rect, #tool-bar #tool-bar-container .item.active .notification path {
                        stroke: rgba(71, 78, 94, 1);
                    }

                    #tool-bar .item .icon {
                        position: relative;
                        max-width: 20px;
                        max-height: 20px;
                        user-select: none;
                    }

                    #tool-bar .item .icon>svg {
                        width: 20px;
                        height: 20px;
                        display: block;
                        margin: auto;
                    }

                    @media (forced-colors: active) {
                        #tool-bar .item svg path[fill="#fff"] {
                            fill: black;
                        }
                    }

                    #tool-bar .item .notification {
                        display: none;
                        position: absolute;
                        top: -4px;
                        right: -6px;
                        width: 10px;
                        height: 10px;
                    }

                    #tool-bar .item .notification svg {
                        display: block;
                    }

                    #toolbar-root:not([data-no-notification]) #tool-bar .item .notification[data-active] {
                        display: block;
                    }

                    #tool-bar #tool-bar-container {
                        height: 100%;
                        width: 100%;
                        display: flex;
                    }

                    #tool-bar .separator {
                        background: rgba(52, 56, 65, 1);
                        width: 1px;
                    }
                </style>
                <div id="toolbar-root" data-hidden>
                    <div id="tool-bar-hitbox-above"></div>

                    <div id="tool-bar">
                        <div id="tool-bar-container">
                            <button class="item" data-app-id="astro:home">
                                <div class="icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 85 107">
                                        <path fill="#fff" d="M27.6 91.1c-4.8-4.4-6.3-13.7-4.2-20.4 3.5 4.2 8.3 5.6 13.3 6.3 7.7 1.2 15.3.8 22.5-2.8l2.5-1.4c.7 2 .9 3.9.6 5.9-.6 4.9-3 8.7-6.9 11.5-1.5 1.2-3.2 2.2-4.8 3.3-4.9 3.3-6.2 7.2-4.4 12.9l.2.6a13 13 0 0 1-5.7-5 13.8 13.8 0 0 1-2.2-7.4c0-1.3 0-2.7-.2-4-.5-3.1-2-4.6-4.8-4.7a5.5 5.5 0 0 0-5.7 4.6l-.2.6Z"></path><path fill="url(#a)" d="M27.6 91.1c-4.8-4.4-6.3-13.7-4.2-20.4 3.5 4.2 8.3 5.6 13.3 6.3 7.7 1.2 15.3.8 22.5-2.8l2.5-1.4c.7 2 .9 3.9.6 5.9-.6 4.9-3 8.7-6.9 11.5-1.5 1.2-3.2 2.2-4.8 3.3-4.9 3.3-6.2 7.2-4.4 12.9l.2.6a13 13 0 0 1-5.7-5 13.8 13.8 0 0 1-2.2-7.4c0-1.3 0-2.7-.2-4-.5-3.1-2-4.6-4.8-4.7a5.5 5.5 0 0 0-5.7 4.6l-.2.6Z"></path><path fill="#fff" d="M0 69.6s14.3-7 28.7-7l10.8-33.5c.4-1.6 1.6-2.7 3-2.7 1.2 0 2.4 1.1 2.8 2.7l10.9 33.5c17 0 28.6 7 28.6 7L60.5 3.2c-.7-2-2-3.2-3.5-3.2H27.8c-1.6 0-2.7 1.3-3.4 3.2L0 69.6Z"></path><defs><linearGradient id="a" x1="22.5" x2="69.1" y1="107" y2="84.9" gradientUnits="userSpaceOnUse"><stop stop-color="#D83333"></stop><stop offset="1" stop-color="#F041FF"></stop></linearGradient></defs>
                                    </svg>
                                    <div class="notification"></div>
                                </div>
                                <span class="item-tooltip">Menu</span>
                            </button>

                            <div class="separator"></div>

                            <button is="jordans-themes" class="item" data-app-id="theme-selector"></button>
                        </div>
                    </div>
                    
                    <div id="tool-bar-hitbox-below"></div>
                </div>`;
            
            //this.shadowRoot.querySelector("#tool-bar-container").appendChild( //customElements.define("Theme-Selector", ThemeSelector) );
            this.toolbarContainer = this.shadowRoot.querySelector("#toolbar-root"); //focus the toolbar root
            this.attachEvents(); //attach mouseenter & mouseleave events for animations
            
            // Creates the tooltip canvas for each app within toolbar
            this.apps.forEach(async (app) => {
                //settings.logger.verboseLog(`Creating app canvas for ${app.id}`);
                const appCanvas = document.createElement("jordans-toolbar-app-canvas");
                appCanvas.dataset.appId = app.id;
                this.shadowRoot?.append(appCanvas);
            });

            if ("requestIdleCallback" in window) {
                window.requestIdleCallback(
                    async () => {
                        this.apps.map((app) => this.initApp(app));
                    },
                    { timeout: 300 }
                );
            } else {
                setTimeout(async () => {
                    this.apps.map((app) => this.initApp(app));
                }, 300);
            }
        }

        /* To go within #bar-container
                ${this.apps.filter((app) => app.builtIn && !["astro:settings", "astro:more"].includes(app.id)).map((app) => this.getAppTemplate(app)).join("")}
                                ${this.apps.filter((app) => !app.builtIn).length > 0 ? `<div class="separator"></div>${this.apps.filter((app) => !app.builtIn).slice(0, this.customAppsToShow).map((app) => this.getAppTemplate(app)).join("")}` : ""}
                                ${this.apps.filter((app) => !app.builtIn).length > this.customAppsToShow ? this.getAppTemplate(
                                    this.apps.find((app) => app.builtIn && app.id === "astro:more")
                                    ) : ""}
        */
        
        // Attach events to toolbar for animations
        attachEvents() {
            /*
            const items = this.shadowRoot.querySelectorAll(".item");
            items.forEach((item) => {
                item.addEventListener("click", async (event) => {
                const target = event.currentTarget;
                    if (!target || !(target instanceof HTMLElement))
                    return;
                    const id = target.dataset.appId;
                    if (!id)
                    return;
                    const app = this.getAppById(id);
                    if (!app)
                    return;
                    event.stopPropagation();
                    await this.toggleAppStatus(app);
                });
            });
            */

            // When the mouse enters the div box of #toolbar-root
            ["mouseenter", "focusin"].forEach((event) => {
                this.toolbarContainer.addEventListener(event, () => {
                this.clearDelayedHide();
                    if (this.isHidden()) {
                    this.setToolbarVisible(true);
                    }
                });
            });
            
            // When the mouse leaves the div box of #toolbar-root
            ["mouseleave", "focusout"].forEach((event) => {

                this.toolbarContainer.addEventListener(event, () => {
                    this.clearDelayedHide(); //prep for hide
                    // if any of the apps are active or the toolbar is already hidden, ignore
                    if (this.getActiveApp() !== undefined || this.isHidden()) {
                        console.log("still active...");
                        //return;
                    }
                    console.log("leaving");
                    this.triggerDelayedHide(); //otherwise hide toolbar
                });
            });
            
            // Add event listener to keyboard input 
            document.addEventListener("keyup", (event) => {
                if (event.key !== "Escape")
                    return;
                if (this.isHidden())
                    return;
                const activeApp = this.getActiveApp();
                if (activeApp == undefined) {
                    //this.toggleAppStatus(activeApp);
                } else { // -> if user presses escape key, it'll exit the toolbar
                    this.setToolbarVisible(false);
                }
            });
        }

        getAppTemplate(app) {
            return `<button class="item" data-app-id="${app.id}">
                        <div class="icon">${app.icon ? getAppIcon(app.icon) : "?"}<div class="notification"></div></div>
                        <span class="item-tooltip">${app.name}</span>
                    </button>`;
        }

        isHidden() {
            var res = this.devToolbarContainer?.hasAttribute("data-hidden") ?? true
            console.log("checking hidden -> " + res);
            return res;
        }

        getActiveApp() {
            var res = this.apps.find((app) => app.active)
            console.log("checking activity -> " + res);
            return res;
        }

        clearDelayedHide() {
            window.clearTimeout(this.delayedHideTimeout);
            this.delayedHideTimeout = void 0;
        }

        triggerDelayedHide() {
            console.log("Triggering hide");
            this.clearDelayedHide();
            this.delayedHideTimeout = window.setTimeout(() => {
                this.setToolbarVisible(false);
                this.delayedHideTimeout = void 0;
            }, HOVER_DELAY);
            console.log("\ttriggered");
        }
        
        setToolbarVisible(newStatus) {
            const barContainer = this.shadowRoot.querySelector("#tool-bar-container");
            const toolBar = this.shadowRoot.querySelector("#tool-bar");
            const toolBarHitboxBelow = this.shadowRoot.querySelector("#tool-bar-hitbox-below");
            
            if (newStatus === true) {
                this.toolbarContainer?.removeAttribute("data-hidden");
                barContainer?.removeAttribute("inert");
                toolBar?.removeAttribute("tabindex");
                if (toolBarHitboxBelow)
                    toolBarHitboxBelow.style.height = "0";
                return;
            }
            
            if (newStatus === false) {
                this.toolbarContainer?.setAttribute("data-hidden", "");
                barContainer?.setAttribute("inert", "");
                toolBar?.setAttribute("tabindex", "0");
                if (toolBarHitboxBelow)
                    toolBarHitboxBelow.style.height = `${TOOLBAR_HITBOX_BELOW}px`;
                return;
            }
        }
    }

    function getAppIcon(icon) {
    if (isDefinedIcon(icon)) {
        return getIconElement(icon).outerHTML;
    }
    return icon;
    }
    
//let customElementRegistry = window.customElements;
    customElements.define("jordans-toolbar", JordansToolbar);
    //console.log(document.querySelector("jordans-themes"));
    //console.log(ThemeSelector);
</script>
